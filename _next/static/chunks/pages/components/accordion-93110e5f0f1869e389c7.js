_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[10],{HbGN:function(e,n,t){"use strict";function a(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}t.d(n,"a",(function(){return a}))},Km8e:function(e,n,t){"use strict";var a=Object.assign.bind(Object);e.exports=a,e.exports.default=e.exports},OU0d:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/accordion",function(){return t("d3um")}])},ZVZ0:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return O})),t.d(n,"c",(function(){return b}));var a=t("ERkP"),o=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=o.a.createContext({}),b=function(e){var n=o.a.useContext(d),t=n;return e&&(t="function"===typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=b(e.components);return o.a.createElement(d.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},u=o.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=b(t),u=a,O=p["".concat(c,".").concat(u)]||p[u]||m[u]||r;return t?o.a.createElement(O,i(i({ref:n},d),{},{components:t})):o.a.createElement(O,i({ref:n},d))}));function O(e,n){var t=arguments,a=n&&n.mdxType;if("string"===typeof e||a){var r=t.length,c=new Array(r);c[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"===typeof e?e:a,c[1]=i;for(var d=2;d<r;d++)c[d]=t[d];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},cxan:function(e,n,t){"use strict";function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}t.d(n,"a",(function(){return a}))},d3um:function(e,n,t){"use strict";t.r(n),t.d(n,"default",(function(){return d}));var a=t("cxan"),o=t("HbGN"),r=t("ERkP"),c=t.n(r),i=t("ZVZ0"),l=(c.a.createElement,{});function d(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("hr",null),Object(i.b)("h2",null,"title: Accordion"),Object(i.b)("h1",null,"Accordion"),Object(i.b)("p",null,"Accordions display a list of high-level options that can expand/collapse to reveal more information."),Object(i.b)("h2",null,"Import"),Object(i.b)("p",null,"Theme UI Expansion Pack exports 5 accordion related components."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Accordion"),": The wrapper that uses cloneElement to pass it's prop to the ",Object(i.b)("inlineCode",{parentName:"li"},"AccordionItem"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"AccordionItem"),": A single accordion item."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"AccordionHeader"),": The button that toggles the expand/collapse state of the accordion item."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"AccordionPanel"),": The container for the details to be revealed."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"AccordionIcon"),": A ",Object(i.b)("inlineCode",{parentName:"li"},"chevron-down")," icon that rotates based on the expanded/collapsed state")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import {\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionPanel,\n  AccordionIcon,\n} from 'theme-ui-expansion-pack';\n")),Object(i.b)("h2",null,"Usage"),Object(i.b)("p",null,"By default, only one item may be expanded and it can only be collapsed again by expanding another."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx",metastring:"live=true",live:"true"}),'<Accordion>\n  <AccordionItem>\n    <AccordionHeader>\n      <Box flex="1" textAlign="left">\n        Section 1 title\n      </Box>\n      <AccordionIcon />\n    </AccordionHeader>\n    <AccordionPanel pb={4}>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n      magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n      consequat.\n    </AccordionPanel>\n  </AccordionItem>\n\n  <AccordionItem>\n    <AccordionHeader>\n      <Box flex="1" textAlign="left">\n        Section 2 title\n      </Box>\n      <AccordionIcon />\n    </AccordionHeader>\n    <AccordionPanel pb={4}>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n      magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n      consequat.\n    </AccordionPanel>\n  </AccordionItem>\n</Accordion>\n')),Object(i.b)("h3",null,"Expand multiple items at once"),Object(i.b)("p",null,"If you set ",Object(i.b)("inlineCode",{parentName:"p"},"allowMultiple")," to true then the accordion will permit multiple items to be expanded at once."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"If you pass this prop, ensure that the ",Object(i.b)("inlineCode",{parentName:"p"},"index")," or ",Object(i.b)("inlineCode",{parentName:"p"},"defaultIndex")," prop is an array.")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx",metastring:"live=true",live:"true"}),'<Accordion defaultIndex={[0]} allowMultiple>\n  <AccordionItem>\n    <AccordionHeader>\n      <Box flex="1" textAlign="left">\n        Section 1 title\n      </Box>\n      <AccordionIcon />\n    </AccordionHeader>\n    <AccordionPanel pb={4}>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n      magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n      consequat.\n    </AccordionPanel>\n  </AccordionItem>\n\n  <AccordionItem>\n    <AccordionHeader>\n      <Box flex="1" textAlign="left">\n        Section 2 title\n      </Box>\n      <AccordionIcon />\n    </AccordionHeader>\n    <AccordionPanel pb={4}>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n      magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n      consequat.\n    </AccordionPanel>\n  </AccordionItem>\n</Accordion>\n')),Object(i.b)("h3",null,"Toggle each accordion item"),Object(i.b)("p",null,"If you set ",Object(i.b)("inlineCode",{parentName:"p"},"allowToggle")," to true, any expanded item may be collapsed again."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx",metastring:"live=true",live:"true"}),'<Accordion allowToggle>\n  <AccordionItem>\n    <AccordionHeader>\n      <Box flex="1" textAlign="left">\n        Section 1 title\n      </Box>\n      <AccordionIcon />\n    </AccordionHeader>\n    <AccordionPanel pb={4}>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n      magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n      consequat.\n    </AccordionPanel>\n  </AccordionItem>\n\n  <AccordionItem>\n    <AccordionHeader>\n      <Box flex="1" textAlign="left">\n        Section 2 title\n      </Box>\n      <AccordionIcon />\n    </AccordionHeader>\n    <AccordionPanel pb={4}>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n      magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n      consequat.\n    </AccordionPanel>\n  </AccordionItem>\n</Accordion>\n')),Object(i.b)("h3",null,"Styling the expanded state"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"AccordionHeader")," component has ",Object(i.b)("inlineCode",{parentName:"p"},"aria-expanded")," set to ",Object(i.b)("inlineCode",{parentName:"p"},"true")," or ",Object(i.b)("inlineCode",{parentName:"p"},"false")," depending on the state of the ",Object(i.b)("inlineCode",{parentName:"p"},"AccordionItem"),". Use the style prop ",Object(i.b)("inlineCode",{parentName:"p"},"_expanded")," to style this state."),Object(i.b)("p",null,"Click me to see a different style"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx",metastring:"live=true",live:"true"}),"<AccordionItem>\n  <AccordionHeader _expanded={{ bg: 'tomato', color: 'white' }}>\n    <Box flex=\"1\" textAlign=\"left\">\n      Click me to see a different style\n    </Box>\n    <AccordionIcon />\n  </AccordionHeader>\n  <AccordionPanel>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna\n    aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n  </AccordionPanel>\n</AccordionItem>\n")),Object(i.b)("h3",null,"Accessing the internal state"),Object(i.b)("p",null,"If you need access to the internal state of each accordion item, you can use a render prop. It provides 2 internal state ",Object(i.b)("inlineCode",{parentName:"p"},"isExpanded"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"isDisabled"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx",metastring:"live=true",live:"true"}),'<Accordion allowMultiple>\n  <AccordionItem>\n    <AccordionHeader>\n      <Box flex="1" textAlign="left">\n        Section 2 title\n      </Box>\n      <AccordionIcon />\n    </AccordionHeader>\n    <AccordionPanel pb={4}>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n      magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n      consequat.\n    </AccordionPanel>\n  </AccordionItem>\n\n  <AccordionItem>\n    {({ isExpanded }) => (\n      <>\n        <AccordionHeader iconPath={isExpanded ? \'M3,13H21V11H3V13Z\' : \'M13,3H11V21H13V3ZM3,13H21V11H3V13Z\'}>\n          <Box flex="1" textAlign="left">\n            Section 2 title\n          </Box>\n          {isExpanded ? <MdKeyboardArrowUp /> : <MdKeyboardArrowDown />}\n        </AccordionHeader>\n        <AccordionPanel pb={4}>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\n          magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n          consequat.\n        </AccordionPanel>\n      </>\n    )}\n  </AccordionItem>\n</Accordion>\n')),Object(i.b)("h2",null,"Accessibility"),Object(i.b)("p",null,"Pressing ",Object(i.b)("inlineCode",{parentName:"p"},"space")," or ",Object(i.b)("inlineCode",{parentName:"p"},"enter")," when focus is on the accordion panel header will toggle (expand or collapse) the accordion."),Object(i.b)("h2",null,"Props"),Object(i.b)("h3",null,"Accordion Props"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Type"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Default"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"allowMultiple")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"If true, multiple accordion items can be expanded at once.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"allowToggle")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"If true, any expanded accordion item can be collapsed again.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"index")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"NumberOrArrayOfNumber")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"\xa0"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The index(es) of the expanded accordion item")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"defaultIndex")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"NumberOrArrayOfNumber")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"\xa0"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The initial index(es) of the expanded accordion item")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"onChange")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"(NumberOrArrayOfNumber) => void")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The callback invoked when accordion items are expanded or collapsed.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"children")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"ReactNode")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"\xa0"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The content of the accordion. The children must be the AccordionHeader and AccordionPanel components.")))),Object(i.b)("h3",null,"AccordionItem Props"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Type"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Default"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"isOpen")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"If true, expands the accordion in the controlled mode.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"defaultIsOpen")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"If true, expands the accordion by on initial mount.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"id")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"string")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"A unique id for the accordion item.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"isDisabled")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"boolean")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"If true, the accordion header will be disabled.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"onChange")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"(NumberOrArrayOfNumber) => void")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The callback fired when the accordion is expanded/collapsed.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"children")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"ReactNode, (RenderProps) => ReactNode")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null})),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The content of the accordion. The children must be the AccordionHeader and AccordionPanel components.")))),Object(i.b)("h3",null,"AccordionHeader Props"),Object(i.b)("p",null,"AccordionHeader renders a ",Object(i.b)("inlineCode",{parentName:"p"},"button")," and composes ",Object(i.b)("inlineCode",{parentName:"p"},"Box"),", this means you add a theme key ",Object(i.b)("inlineCode",{parentName:"p"},"accordion")," in your theme object and add theme variant ",Object(i.b)("inlineCode",{parentName:"p"},"accordionHeader")," to style your ",Object(i.b)("inlineCode",{parentName:"p"},"AccordionHeader"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"export default {\n  accordion: {\n    accordionHeader: {\n      // ...your styles for accordion header\n    },\n  },\n};\n")),Object(i.b)("h3",null,"AccordionPanel Props"),Object(i.b)("p",null,"AccordionPanel renders a ",Object(i.b)("inlineCode",{parentName:"p"},"Box")," and composes ",Object(i.b)("inlineCode",{parentName:"p"},"Box")," to provide the height tranisiton."))}d.isMDXComponent=!0}},[["OU0d",0,1]]]);